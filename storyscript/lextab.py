# lextab.py. This file automatically created by PLY (version 3.10). Don't edit!
_tabversion   = '3.10'
_lextokens    = set(('DEDENT', 'REGEX', 'STRING_START_TRIPLE', 'AFTER', 'EOF', 'MIN', 'TOP', 'ELIF', 'INTO', 'ISNT', 'WS', 'PATH', 'OLDEST', 'WITH', 'UNSET', 'STRING_END', 'DIGITS', 'NI', 'SET', 'RPAREN', 'HAS', 'BOTTOM', 'NUMBEROF', 'EQ', 'NEWLINE', 'WHEN', 'NE', 'TO', 'LT', 'SMALLEST', 'COMMA', 'FROM', 'PUSH', 'FIRST', 'AVERAGE', 'LOWEST', 'TAGGED', 'GT', 'NEWEST', 'SCHEDULE', 'IS', 'RANDOM', 'STRING_START_SINGLE', 'ELSE', 'TRY', 'CATCH', 'AS', 'ASCDESC', 'LEAST', 'LPAREN', 'LARGEST', 'OPERATOR', 'LAST', 'UNIQUE', 'WHERE', 'ID', 'IF', 'AND', 'HIGHEST', 'INDENT', 'LIKE', 'MOST', 'MAX', 'SUM', 'CONTAINS', 'WHILE', 'LENGTH', 'BOOLEAN', 'SORTBY', 'STRING_CONTINUE', 'OF', 'ELSEIF', 'KWARG', 'AVG', 'OR'))
_lexreflags   = 64
_lexliterals  = ''
_lexstateinfo = {'INITIAL': 'inclusive', 'variable': 'exclusive', 'tripleq2': 'exclusive', 'tripleq1': 'exclusive', 'singleq2': 'exclusive', 'singleq1': 'exclusive'}
_lexstatere   = {'INITIAL': [('(?P<t_BOOLEAN>(true|false)(?=\\s))|(?P<t_REGEX>\\/[^\\s]+\\/i?)|(?P<t_NUMBEROF>number\\sof)|(?P<t_KWARG>(--[a-z\\_]+))|(?P<t_EQ>((==?)|((is\\s)?equals?(?=\\s)(\\sto)?)))|(?P<t_NE>(!=|((is\\s)?not\\sequals?(\\sto)?)))|(?P<t_OPERATOR>(\\+|-|\\*|\\/|\\<=|\\>=))|(?P<t_GT>(\\>|((is\\s)?greater\\sth(e|a)n)))|(?P<t_LT>(\\<|((is\\s)?less\\sth(e|a)n)))|(?P<t_ISNT>((is\\snot)|isnt|not)(?=\\s))|(?P<t_CONJ>((the)|a|(an))\\s)|(?P<t_WS> [ \\t]+ )|(?P<t_escaped_newline>\\\\\\n)|(?P<t_newline>\\n+)|(?P<t_ELSEIF>(else\\s(if|unless)))|(?P<t_IF>(if|unless))|(?P<t_SORTBY>(sort\\sby))|(?P<t_ASCDESC>(asc|desc)(?=\\s))|(?P<t_FROM>(for|from)(?=\\s))|(?P<t_NI>(at|on|in)(?=\\s))|(?P<t_SCHEDULE>(hourly|daily|weekly|monthly|quarterly|yearly|every)(?=\\s))|(?P<t_ID>((\\.?_?[a-zA-Z]+(\\-\\w+)?\\d*)|(\\[(\'[^\']+\'|"[^"]+"|\\d+)\\]))+(\\[(-?\\d+)(((?:(-?\\d+))\\.{2})|(\\.{2}(?=(-?\\d+))))?((?:\\.{2})-?\\d*)?\\])?)|(?P<t_DIGITS>\\-?\\$?(?:0[xX][0-9a-fA-F]+|0[0-7]+|(?:(?:0|[1-9][0-9]*)\\.[0-9]*(?:[eE][+-]?[0-9]+)?|\\.[0-9]+(?:[eE][+-]?[0-9]+)?|(?:0|[1-9][0-9]*)(?:[eE][+-]?[0-9]+)?))\\%?)|(?P<t_COMMENT>\\#.*)|(?P<t_start_triple_quoted_q1_string>\'\'\')|(?P<t_start_triple_quoted_q2_string>""")|(?P<t_start_single_quoted_q1_string>\')|(?P<t_start_single_quoted_q2_string>")|(?P<t_SET>set)|(?P<t_COMMA>\\,)|(?P<t_LPAREN>\\()|(?P<t_RPAREN>\\))', [None, ('t_BOOLEAN', 'BOOLEAN'), None, ('t_REGEX', 'REGEX'), ('t_NUMBEROF', 'NUMBEROF'), ('t_KWARG', 'KWARG'), None, ('t_EQ', 'EQ'), None, None, None, None, None, ('t_NE', 'NE'), None, None, None, None, ('t_OPERATOR', 'OPERATOR'), None, ('t_GT', 'GT'), None, None, None, None, ('t_LT', 'LT'), None, None, None, None, ('t_ISNT', 'ISNT'), None, None, ('t_CONJ', 'CONJ'), None, None, None, ('t_WS', 'WS'), ('t_escaped_newline', 'escaped_newline'), ('t_newline', 'newline'), ('t_ELSEIF', 'ELSEIF'), None, None, ('t_IF', 'IF'), None, ('t_SORTBY', 'SORTBY'), None, ('t_ASCDESC', 'ASCDESC'), None, ('t_FROM', 'FROM'), None, ('t_NI', 'NI'), None, ('t_SCHEDULE', 'SCHEDULE'), None, ('t_ID', 'ID'), None, None, None, None, None, None, None, None, None, None, None, None, None, ('t_DIGITS', 'DIGITS'), ('t_COMMENT', 'COMMENT'), ('t_start_triple_quoted_q1_string', 'start_triple_quoted_q1_string'), ('t_start_triple_quoted_q2_string', 'start_triple_quoted_q2_string'), ('t_start_single_quoted_q1_string', 'start_single_quoted_q1_string'), ('t_start_single_quoted_q2_string', 'start_single_quoted_q2_string'), (None, 'SET'), (None, 'COMMA'), (None, 'LPAREN'), (None, 'RPAREN')])], 'variable': [('(?P<t_variable_PATH>((\\.?_?[a-zA-Z]+(\\-\\w+)?\\d*)|(\\[(\'[^\']+\'|"[^"]+"|\\d+)\\]))+(\\[(-?\\d+)(((?:(-?\\d+))\\.{2})|(\\.{2}(?=(-?\\d+))))?((?:\\.{2})-?\\d*)?\\])?)|(?P<t_tripleq1_variable_START>{{)|(?P<t_tripleq1_variable_end>}})|(?P<t_tripleq2_variable_START>{{)|(?P<t_singleq1_variable_START>{{)|(?P<t_singleq2_variable_START>{{)', [None, ('t_variable_PATH', 'PATH'), None, None, None, None, None, None, None, None, None, None, None, None, None, ('t_tripleq1_variable_START', 'START'), ('t_tripleq1_variable_end', 'end'), ('t_tripleq2_variable_START', 'START'), ('t_singleq1_variable_START', 'START'), ('t_singleq2_variable_START', 'START')])], 'tripleq2': [('(?P<t_singleq1_singleq2_tripleq1_tripleq2_escaped>\\\\(.|\\n))|(?P<t_tripleq2_simple>((({|})?[^{}"])|("{0,2}[^"{}]+))+)|(?P<t_tripleq2_variable_START>{{)|(?P<t_tripleq2_end>""")', [None, ('t_singleq1_singleq2_tripleq1_tripleq2_escaped', 'escaped'), None, ('t_tripleq2_simple', 'simple'), None, None, None, None, ('t_tripleq2_variable_START', 'START'), ('t_tripleq2_end', 'end')])], 'tripleq1': [("(?P<t_singleq1_singleq2_tripleq1_tripleq2_escaped>\\\\(.|\\n))|(?P<t_tripleq1_simple>((({|})?[^{}'])|('{0,2}[^'{}]+))+)|(?P<t_tripleq1_variable_START>{{)|(?P<t_tripleq1_variable_end>}})|(?P<t_tripleq1_end>''')", [None, ('t_singleq1_singleq2_tripleq1_tripleq2_escaped', 'escaped'), None, ('t_tripleq1_simple', 'simple'), None, None, None, None, ('t_tripleq1_variable_START', 'START'), ('t_tripleq1_variable_end', 'end'), ('t_tripleq1_end', 'end')])], 'singleq2': [('(?P<t_singleq1_singleq2_tripleq1_tripleq2_escaped>\\\\(.|\\n))|(?P<t_singleq2_simple>(({|})?[^{}"])+)|(?P<t_singleq2_variable_START>{{)|(?P<t_singleq2_end>")', [None, ('t_singleq1_singleq2_tripleq1_tripleq2_escaped', 'escaped'), None, ('t_singleq2_simple', 'simple'), None, None, ('t_singleq2_variable_START', 'START'), ('t_singleq2_end', 'end')])], 'singleq1': [("(?P<t_singleq1_singleq2_tripleq1_tripleq2_escaped>\\\\(.|\\n))|(?P<t_singleq1_simple>(({|})?[^{}'])+)|(?P<t_singleq1_variable_START>{{)|(?P<t_singleq1_end>')", [None, ('t_singleq1_singleq2_tripleq1_tripleq2_escaped', 'escaped'), None, ('t_singleq1_simple', 'simple'), None, None, ('t_singleq1_variable_START', 'START'), ('t_singleq1_end', 'end')])]}
_lexstateignore = {'INITIAL': '', 'variable': ' ', 'tripleq2': '', 'tripleq1': '', 'singleq2': '', 'singleq1': ''}
_lexstateerrorf = {'INITIAL': 't_error', 'variable': 't_variable_error', 'tripleq2': 't_tripleq2_error', 'tripleq1': 't_tripleq1_error', 'singleq2': 't_singleq2_error', 'singleq1': 't_singleq1_error'}
_lexstateeoff = {}
