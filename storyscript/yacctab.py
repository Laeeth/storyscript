
# yacctab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programDEDENT LOWEST STRING_START_TRIPLE CONTAINS EOF MIN IS TOP ELIF ISNT WS PATH OLDEST WITH UNSET STRING_END DIGITS NI SET RPAREN BOTTOM WHERE NEWLINE WHEN NE PUSH NEWEST TO LT BOOLEAN COMMA CATCH IF AVERAGE LAST REGEX TAGGED GT NUMBEROF AFTER SCHEDULE INTO RANDOM STRING_START_SINGLE ELSE TRY MOST AS LEAST LPAREN LARGEST OPERATOR INDENT SMALLEST EQ ID FIRST AND UNIQUE AVG FROM LIKE MAX SUM ASCDESC WHILE LENGTH KWARG SORTBY STRING_CONTINUE OF ELSEIF HAS HIGHEST ORprogram : story\n                   | WS ID ELIFpaths :       PATH\n                 | paths PATHstmts : stmt\n                 | stmts stmtsuite : NEWLINE INDENT stmts DEDENTstmt : IF expressions suite\n                | IF expressions suite else_if\n                | IF expressions suite else_if ELSE suite\n                | IF expressions suite         ELSE suiteelse_if :         ELSEIF expressions suite\n                   | else_if ELSEIF expressions suitestmt : TRY suite CATCH suite\n                | TRY suite CATCH suite ELSE suiteoptional_stmts : stmts\n                          |output : AS PATH\n                  |juice : args output NEWLINE\n                 | args output NEWLINE INDENT kwargs optional_stmts DEDENT\n                 |      output NEWLINE INDENT kwargs optional_stmts DEDENT\n                 |      output NEWLINEstmt : SCHEDULE juicestmt : WHEN figure_expression suitestmt : AFTER string output suitestmt : PATH   juice\n                | RANDOM juicestory : stmt  EOF\n                | stmts EOFof : OF\n              | agg : AVERAGE  of\n               | AVG      of\n               | NUMBEROF\n               | LENGTH   of\n               | MAX      of\n               | OLDEST   of\n               | HIGHEST  of\n               | LARGEST  of\n               | MIN      of\n               | NEWEST   of\n               | SMALLEST of\n               | LOWEST   of\n               | SUM      of\n               | RANDOM   of\n               | offit : FIRST  DIGITS of\n                 | TOP    DIGITS of\n                 | LAST   DIGITS of\n                 | BOTTOM DIGITS of\n                 |        DIGITS\n                 | FIRST\n                 | LAST\n                 | unique : UNIQUE\n                  | figexp : agg expression\n                  |     expressionfigexps : WHERE       figexp\n                   | figexps AND figexp\n                   | figexps OR  figexpsort : SORTBY PATH ASCDESC\n                | SORTBY PATH\n                | time : FROM string\n                | location : NI PATH\n                    |figaggone : MOST\n                     | HIGHEST\n                     | LARGEST\n                     | NEWEST\n                     | LEAST\n                     | SMALLEST\n                     | LOWEST\n                     | OLDESTfigaggexp : figaggone pathsfigure : agg offit unique paths figexps sort time\n                  | agg offit unique paths         sort time\n                  | agg              paths figexps      time\n                  | agg              paths figexps\n                  | agg              paths              time\n                  |     offit        paths figexps sort time\n                  |     offit        paths         sort time\n                  |                  paths figexps      time\n                  |     offit unique paths              time\n                  |                  paths              timefigure : offit  PATH WITH figaggexp location figexps time\n                  |        PATH WITH figaggexp location figexps time\n                  | offit  PATH WITH figaggexp location               time\n                  |        PATH WITH figaggexp location               timefigure_expression : figure LT expression\n                             | figure GT expression\n                             | figure EQ expression\n                             | figure NE expressionstmt : SET PATH TO paths NEWLINEstmt : SET PATH TO figure NEWLINEstmt : SET PATH TO expressions NEWLINEstmt : UNSET PATH NEWLINEstmt : PUSH variable INTO paths NEWLINEstmt : WITH paths suitestmt : WHILE paths               output suite\n                | WHILE expressions         output suite\n                | WHILE figure_expression   output suiteexpression : pathsexpression : DIGITSexpression : variableexpressions : expression\n                       | expressions AND expression\n                       | expressions OR  expressionexpression : paths HAS pathsexpression : ISNT expressionexpression : paths ISNT NI pathsexpression : variable CONTAINS variable\n                      | variable    NI    variableexpression : paths      LIKE expression\n                      | paths IS   LIKE expression\n                      | paths ISNT LIKE expression\n                      | paths      LIKE REGEX\n                      | paths IS   LIKE REGEX\n                      | paths ISNT LIKE REGEXexpression : paths IS   variable\n                      | paths ISNT variableexpression : ISNT TAGGED string\n                      |      TAGGED stringexpression : expression OPERATOR expression\n                      | expression LT       expression\n                      | expression GT       expression\n                      | expression EQ       expression\n                      | expression NE       expressionexpression : LPAREN expressions RPARENstring_content : paths\n                          | STRING_CONTINUEstring_inner :              string_content\n                        | string_inner string_contentstring : STRING_START_SINGLE string_inner STRING_END\n                  | STRING_START_TRIPLE string_inner STRING_ENDvariable : paths\n                    | string\n                    | BOOLEAN\n                    | DIGITSargs :            variable\n                | args COMMA variable\n                |kwarg : KWARG NEWLINE\n                 | KWARG variable NEWLINE\n                 | KWARG paths NEWLINEkwargs : kwarg\n                  | kwargs kwarg\n                  |'
    
_lr_action_items = {'DEDENT':([57,66,71,72,144,145,146,148,152,171,188,205,213,214,219,220,221,225,226,245,246,247,249,250,251,252,254,255,267,268,269,270,272,274,275,276,283,284,285,286,287,290,],[-27,-6,-24,-28,-23,-102,-100,-25,-8,-104,-103,-105,-20,-151,252,-5,-14,-9,-26,-151,-149,-17,-98,-99,-97,-7,-101,-11,-17,284,-150,-16,-146,-15,-12,-10,290,-22,-148,-147,-13,-21,]),'REGEX':([105,173,176,],[186,230,233,]),'STRING_START_TRIPLE':([1,3,11,12,15,16,17,20,21,22,25,30,31,32,33,34,36,38,39,43,45,47,49,50,85,86,87,88,89,90,91,92,94,96,97,98,100,103,104,105,113,114,115,117,120,121,122,125,128,131,132,133,134,135,136,137,138,141,147,173,176,178,180,182,224,248,258,],[18,18,18,18,18,18,18,-32,-32,-32,-32,-32,-32,-32,18,-35,-32,18,-32,-32,18,-32,-32,-32,18,18,18,18,-41,-31,-45,-40,18,18,-38,18,18,18,18,18,-42,-43,-33,-46,-37,18,18,-39,18,-36,-44,-34,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'CONTAINS':([23,26,27,35,40,48,61,78,79,99,155,195,217,218,],[-3,-142,-139,-140,122,-141,-3,-142,-139,-4,-138,-137,-142,-139,]),'EOF':([8,13,57,66,71,72,144,145,146,148,152,171,188,205,213,221,225,226,249,250,251,252,254,255,274,275,276,284,287,290,],[65,73,-27,-6,-24,-28,-23,-102,-100,-25,-8,-104,-103,-105,-20,-14,-9,-26,-98,-99,-97,-7,-101,-11,-15,-12,-10,-22,-13,-21,]),'MIN':([1,9,103,147,178,180,],[20,20,20,20,20,20,]),'IS':([23,27,61,79,99,218,],[-3,100,-3,100,-4,100,]),'SUM':([1,9,103,147,178,180,],[21,21,21,21,21,21,]),'ELIF':([53,],[140,]),'INTO':([35,48,54,56,61,76,99,155,195,],[-140,-141,-139,-142,-3,151,-4,-138,-137,]),'ISNT':([1,16,20,21,22,23,25,27,30,31,32,34,36,38,39,43,45,47,49,50,61,79,85,86,87,88,89,90,91,92,94,96,97,99,103,105,113,114,115,117,120,125,131,132,133,134,135,136,137,138,147,173,176,178,180,182,218,224,258,],[45,45,-32,-32,-32,-3,-32,98,-32,-32,-32,-35,-32,45,-32,-32,45,-32,-32,-32,-3,98,45,45,45,45,-41,-31,-45,-40,45,45,-38,-4,45,45,-42,-43,-33,-46,-37,-39,-36,-44,-34,45,45,45,45,45,45,45,45,45,45,45,98,45,45,]),'WS':([0,],[2,]),'PATH':([0,1,3,4,5,7,8,9,11,12,13,15,16,18,20,21,22,23,25,26,27,28,30,31,32,34,36,37,38,39,41,42,43,44,45,47,49,50,54,57,58,61,62,66,67,68,69,71,72,79,81,82,83,84,85,86,87,88,89,90,91,92,94,96,97,98,99,100,102,103,105,108,109,110,111,112,113,114,115,117,118,120,121,122,123,124,125,126,127,131,132,133,134,135,136,137,138,139,141,144,145,146,147,148,149,151,152,154,160,162,163,164,165,166,167,168,169,171,173,174,176,178,180,181,182,188,191,193,194,199,200,203,205,211,213,214,217,218,219,220,221,222,224,225,226,227,229,232,244,245,246,247,248,249,250,251,252,254,255,258,267,269,270,271,272,274,275,276,284,285,286,287,290,],[3,23,61,61,63,64,3,67,61,61,-5,61,61,61,-32,-32,-32,-3,-32,-52,99,110,-32,-32,-32,-35,-32,61,61,-32,-54,-53,-32,61,61,-32,-32,-32,99,-27,143,-3,99,-6,-3,-52,99,-24,-28,99,99,-135,-134,61,61,61,61,61,-41,-31,-45,-40,61,61,-38,61,-4,61,61,61,61,99,-56,-3,61,-32,-42,-43,-33,-46,61,-37,61,61,-32,-32,-39,99,-57,-36,-44,-34,61,61,61,61,61,-32,61,-23,-102,-100,23,-25,3,61,-8,-136,-76,-73,-70,-72,-74,61,-75,-77,-71,-104,61,61,61,61,61,99,61,-103,240,99,-51,-50,-48,61,-105,-49,-20,-151,-52,99,3,-5,-14,99,61,-9,-26,259,99,99,99,-151,-149,3,61,-98,-99,-97,-7,-101,-11,61,3,-150,3,99,-146,-15,-12,-10,-22,-148,-147,-13,-21,]),'OLDEST':([1,9,93,103,147,178,180,192,],[25,25,168,25,25,25,25,168,]),'WITH':([0,8,13,23,57,66,67,71,72,110,144,145,146,148,149,152,171,188,205,213,214,219,220,221,225,226,245,246,247,249,250,251,252,254,255,267,269,270,272,274,275,276,284,285,286,287,290,],[4,4,-5,93,-27,-6,93,-24,-28,192,-23,-102,-100,-25,4,-8,-104,-103,-105,-20,-151,4,-5,-14,-9,-26,-151,-149,4,-98,-99,-97,-7,-101,-11,4,-150,4,-146,-15,-12,-10,-22,-148,-147,-13,-21,]),'UNSET':([0,8,13,57,66,71,72,144,145,146,148,149,152,171,188,205,213,214,219,220,221,225,226,245,246,247,249,250,251,252,254,255,267,269,270,272,274,275,276,284,285,286,287,290,],[5,5,-5,-27,-6,-24,-28,-23,-102,-100,-25,5,-8,-104,-103,-105,-20,-151,5,-5,-14,-9,-26,-151,-149,5,-98,-99,-97,-7,-101,-11,5,-150,5,-146,-15,-12,-10,-22,-148,-147,-13,-21,]),'STRING_END':([61,81,82,83,84,99,118,154,],[-3,-133,-135,-134,155,-4,195,-136,]),'DIGITS':([1,3,9,11,12,15,16,20,21,22,25,29,30,31,32,34,36,38,39,41,42,43,44,45,47,49,50,52,85,86,87,88,89,90,91,92,94,96,97,98,100,103,105,113,114,115,117,120,121,122,125,131,132,133,134,135,136,137,138,141,147,173,176,178,180,182,224,248,258,],[26,56,68,56,56,56,78,-32,-32,-32,-32,112,-32,-32,-32,-35,-32,78,-32,123,124,-32,68,78,-32,-32,-32,139,78,78,78,78,-41,-31,-45,-40,78,78,-38,56,56,78,78,-42,-43,-33,-46,-37,56,56,-39,-36,-44,-34,78,78,78,78,78,56,217,78,78,78,78,78,78,56,78,]),'NI':([23,26,27,35,40,48,61,78,79,98,99,155,161,195,217,218,229,241,],[-3,-142,-139,-140,121,-141,-3,-142,-139,174,-4,-138,227,-137,-142,-139,-78,227,]),'SET':([0,8,13,57,66,71,72,144,145,146,148,149,152,171,188,205,213,214,219,220,221,225,226,245,246,247,249,250,251,252,254,255,267,269,270,272,274,275,276,284,285,286,287,290,],[7,7,-5,-27,-6,-24,-28,-23,-102,-100,-25,7,-8,-104,-103,-105,-20,-151,7,-5,-14,-9,-26,-151,-149,7,-98,-99,-97,-7,-101,-11,7,-150,7,-146,-15,-12,-10,-22,-148,-147,-13,-21,]),'LAST':([1,9,20,21,22,25,30,31,32,34,36,39,43,44,47,49,50,89,90,91,92,97,113,114,115,117,120,125,131,132,133,147,],[41,41,-32,-32,-32,-32,-32,-32,-32,-35,-32,-32,-32,41,-32,-32,-32,-41,-31,-45,-40,-38,-42,-43,-33,-46,-37,-39,-36,-44,-34,41,]),'BOTTOM':([1,9,20,21,22,25,30,31,32,34,36,39,43,44,47,49,50,89,90,91,92,97,113,114,115,117,120,125,131,132,133,147,],[29,29,-32,-32,-32,-32,-32,-32,-32,-35,-32,-32,-32,29,-32,-32,-32,-41,-31,-45,-40,-38,-42,-43,-33,-46,-37,-39,-36,-44,-34,29,]),'NUMBEROF':([1,9,103,147,178,180,],[34,34,34,34,34,34,]),'WHERE':([23,27,61,67,69,99,108,110,126,161,218,228,229,241,244,259,264,],[-3,103,-3,-3,103,-4,103,-3,103,-69,103,103,-78,-69,103,-68,103,]),'NEWLINE':([3,11,12,14,23,24,26,27,35,40,46,48,51,54,55,56,59,60,61,62,63,70,77,78,79,80,95,99,101,106,107,108,110,116,126,129,130,142,143,150,153,155,156,157,158,159,161,170,172,175,177,179,181,183,184,185,186,187,189,190,193,195,196,197,198,201,202,204,206,207,208,209,210,212,215,216,217,218,222,223,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,248,253,256,257,259,260,261,262,263,264,265,266,271,273,277,278,279,280,281,282,288,289,],[-19,-19,-19,74,-3,-19,-107,-19,-140,-108,-19,-141,-109,-139,-19,-142,144,-143,-3,74,146,74,74,-107,-106,-19,74,-4,-67,-88,74,-65,-3,-126,-67,-113,74,213,-18,74,74,-138,-94,-96,-93,-95,-69,-110,-111,-124,-123,-86,-112,-60,-59,-66,-120,-117,-67,-65,-67,-137,-132,-116,-115,-67,-83,-125,-129,-131,-128,-127,-130,-144,249,250,-107,251,254,74,-67,-78,-122,-119,-114,-121,-118,-61,-62,-58,-85,-67,-64,-69,-87,-81,-65,272,74,74,74,-68,-67,-92,-84,-63,-67,-67,-65,285,286,74,-90,-67,-91,-80,-67,-89,-79,]),'WHEN':([0,8,13,57,66,71,72,144,145,146,148,149,152,171,188,205,213,214,219,220,221,225,226,245,246,247,249,250,251,252,254,255,267,269,270,272,274,275,276,284,285,286,287,290,],[9,9,-5,-27,-6,-24,-28,-23,-102,-100,-25,9,-8,-104,-103,-105,-20,-151,9,-5,-14,-9,-26,-151,-149,9,-98,-99,-97,-7,-101,-11,9,-150,9,-146,-15,-12,-10,-22,-148,-147,-13,-21,]),'NE':([19,23,26,27,35,40,48,51,54,56,61,67,69,78,79,99,101,106,108,110,116,126,129,155,156,157,158,159,161,170,172,175,177,179,181,183,184,185,186,187,189,190,193,195,196,197,198,201,202,204,206,207,208,209,210,217,218,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,259,260,261,262,263,264,265,266,278,279,280,281,282,288,289,],[86,-3,-107,-67,-140,-108,-141,135,-139,-142,-3,-3,-67,-107,-106,-4,-67,-88,-65,-3,-126,-67,135,-138,135,135,135,135,-69,135,135,-124,-123,-86,-112,-60,135,-66,-120,135,-67,-65,-67,-137,-132,-116,-115,-67,-83,-125,135,135,135,135,135,-107,-106,-67,-78,-122,135,-114,-121,135,-61,-62,135,-85,-67,-64,-69,-87,-81,-65,-68,-67,-92,-84,-63,-67,-67,-65,-90,-67,-91,-80,-67,-89,-79,]),'TO':([64,],[147,]),'LT':([19,23,26,27,35,40,48,51,54,56,61,67,69,78,79,99,101,106,108,110,116,126,129,155,156,157,158,159,161,170,172,175,177,179,181,183,184,185,186,187,189,190,193,195,196,197,198,201,202,204,206,207,208,209,210,217,218,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,259,260,261,262,263,264,265,266,278,279,280,281,282,288,289,],[87,-3,-107,-67,-140,-108,-141,136,-139,-142,-3,-3,-67,-107,-106,-4,-67,-88,-65,-3,-126,-67,136,-138,136,136,136,136,-69,136,136,-124,-123,-86,-112,-60,136,-66,-120,136,-67,-65,-67,-137,-132,-116,-115,-67,-83,-125,136,136,136,136,136,-107,-106,-67,-78,-122,136,-114,-121,136,-61,-62,136,-85,-67,-64,-69,-87,-81,-65,-68,-67,-92,-84,-63,-67,-67,-65,-90,-67,-91,-80,-67,-89,-79,]),'SMALLEST':([1,9,93,103,147,178,180,192,],[31,31,167,31,31,31,31,167,]),'COMMA':([3,11,12,35,48,54,55,56,60,61,99,155,195,212,],[-145,-145,-145,-140,-141,-139,141,-142,-143,-3,-4,-138,-137,-144,]),'PUSH':([0,8,13,57,66,71,72,144,145,146,148,149,152,171,188,205,213,214,219,220,221,225,226,245,246,247,249,250,251,252,254,255,267,269,270,272,274,275,276,284,285,286,287,290,],[15,15,-5,-27,-6,-24,-28,-23,-102,-100,-25,15,-8,-104,-103,-105,-20,-151,15,-5,-14,-9,-26,-151,-149,15,-98,-99,-97,-7,-101,-11,15,-150,15,-146,-15,-12,-10,-22,-148,-147,-13,-21,]),'FIRST':([1,9,20,21,22,25,30,31,32,34,36,39,43,44,47,49,50,89,90,91,92,97,113,114,115,117,120,125,131,132,133,147,],[42,42,-32,-32,-32,-32,-32,-32,-32,-35,-32,-32,-32,42,-32,-32,-32,-41,-31,-45,-40,-38,-42,-43,-33,-46,-37,-39,-36,-44,-34,42,]),'TOP':([1,9,20,21,22,25,30,31,32,34,36,39,43,44,47,49,50,89,90,91,92,97,113,114,115,117,120,125,131,132,133,147,],[52,52,-32,-32,-32,-32,-32,-32,-32,-35,-32,-32,-32,52,-32,-32,-32,-41,-31,-45,-40,-38,-42,-43,-33,-46,-37,-39,-36,-44,-34,52,]),'$end':([6,10,65,73,140,],[-1,0,-30,-29,-2,]),'LOWEST':([1,9,93,103,147,178,180,192,],[49,49,160,49,49,49,49,160,]),'TAGGED':([1,16,20,21,22,25,30,31,32,34,36,38,39,43,45,47,49,50,85,86,87,88,89,90,91,92,94,96,97,103,105,113,114,115,117,120,125,131,132,133,134,135,136,137,138,147,173,176,178,180,182,224,258,],[33,33,-32,-32,-32,-32,-32,-32,-32,-35,-32,33,-32,-32,128,-32,-32,-32,33,33,33,33,-41,-31,-45,-40,33,33,-38,33,33,-42,-43,-33,-46,-37,-39,-36,-44,-34,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'GT':([19,23,26,27,35,40,48,51,54,56,61,67,69,78,79,99,101,106,108,110,116,126,129,155,156,157,158,159,161,170,172,175,177,179,181,183,184,185,186,187,189,190,193,195,196,197,198,201,202,204,206,207,208,209,210,217,218,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,259,260,261,262,263,264,265,266,278,279,280,281,282,288,289,],[85,-3,-107,-67,-140,-108,-141,134,-139,-142,-3,-3,-67,-107,-106,-4,-67,-88,-65,-3,-126,-67,134,-138,134,134,134,134,-69,134,134,-124,-123,-86,-112,-60,134,-66,-120,134,-67,-65,-67,-137,-132,-116,-115,-67,-83,-125,134,134,134,134,134,-107,-106,-67,-78,-122,134,-114,-121,134,-61,-62,134,-85,-67,-64,-69,-87,-81,-65,-68,-67,-92,-84,-63,-67,-67,-65,-90,-67,-91,-80,-67,-89,-79,]),'NEWEST':([1,9,93,103,147,178,180,192,],[30,30,162,30,30,30,30,162,]),'SCHEDULE':([0,8,13,57,66,71,72,144,145,146,148,149,152,171,188,205,213,214,219,220,221,225,226,245,246,247,249,250,251,252,254,255,267,269,270,272,274,275,276,284,285,286,287,290,],[11,11,-5,-27,-6,-24,-28,-23,-102,-100,-25,11,-8,-104,-103,-105,-20,-151,11,-5,-14,-9,-26,-151,-149,11,-98,-99,-97,-7,-101,-11,11,-150,11,-146,-15,-12,-10,-22,-148,-147,-13,-21,]),'AVERAGE':([1,9,103,147,178,180,],[32,32,32,32,32,32,]),'RANDOM':([0,1,8,9,13,57,66,71,72,103,144,145,146,147,148,149,152,171,178,180,188,205,213,214,219,220,221,225,226,245,246,247,249,250,251,252,254,255,267,269,270,272,274,275,276,284,285,286,287,290,],[12,36,12,36,-5,-27,-6,-24,-28,36,-23,-102,-100,36,-25,12,-8,-104,36,36,-103,-105,-20,-151,12,-5,-14,-9,-26,-151,-149,12,-98,-99,-97,-7,-101,-11,12,-150,12,-146,-15,-12,-10,-22,-148,-147,-13,-21,]),'STRING_START_SINGLE':([1,3,11,12,15,16,17,20,21,22,25,30,31,32,33,34,36,38,39,43,45,47,49,50,85,86,87,88,89,90,91,92,94,96,97,98,100,103,104,105,113,114,115,117,120,121,122,125,128,131,132,133,134,135,136,137,138,141,147,173,176,178,180,182,224,248,258,],[37,37,37,37,37,37,37,-32,-32,-32,-32,-32,-32,-32,37,-35,-32,37,-32,-32,37,-32,-32,-32,37,37,37,37,-41,-31,-45,-40,37,37,-38,37,37,37,37,37,-42,-43,-33,-46,-37,37,37,-39,37,-36,-44,-34,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'ELSE':([152,221,225,252,275,287,],[223,253,257,-7,-12,-13,]),'TRY':([0,8,13,57,66,71,72,144,145,146,148,149,152,171,188,205,213,214,219,220,221,225,226,245,246,247,249,250,251,252,254,255,267,269,270,272,274,275,276,284,285,286,287,290,],[14,14,-5,-27,-6,-24,-28,-23,-102,-100,-25,14,-8,-104,-103,-105,-20,-151,14,-5,-14,-9,-26,-151,-149,14,-98,-99,-97,-7,-101,-11,14,-150,14,-146,-15,-12,-10,-22,-148,-147,-13,-21,]),'CATCH':([75,252,],[150,-7,]),'AS':([3,11,12,23,24,26,27,35,40,46,48,51,54,55,56,60,61,78,79,80,99,116,129,155,156,157,158,159,170,172,175,177,181,186,187,195,196,197,198,204,206,207,208,209,210,212,230,231,232,233,234,],[58,58,58,-3,58,-107,58,-140,-108,58,-141,-109,-139,58,-142,-143,-3,-107,-106,58,-4,-126,-113,-138,-94,-96,-93,-95,-110,-111,-124,-123,-112,-120,-117,-137,-132,-116,-115,-125,-129,-131,-128,-127,-130,-144,-122,-119,-114,-121,-118,]),'ASCDESC':([240,],[263,]),'LEAST':([93,192,],[165,165,]),'LPAREN':([1,16,20,21,22,25,30,31,32,34,36,38,39,43,45,47,49,50,85,86,87,88,89,90,91,92,94,96,97,103,105,113,114,115,117,120,125,131,132,133,134,135,136,137,138,147,173,176,178,180,182,224,258,],[38,38,-32,-32,-32,-32,-32,-32,-32,-35,-32,38,-32,-32,38,-32,-32,-32,38,38,38,38,-41,-31,-45,-40,38,38,-38,38,38,-42,-43,-33,-46,-37,-39,-36,-44,-34,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'LARGEST':([1,9,93,103,147,178,180,192,],[22,22,164,22,22,22,22,164,]),'OPERATOR':([23,26,27,35,40,48,51,54,56,61,78,79,99,116,129,155,156,157,158,159,170,172,175,177,181,184,186,187,195,196,197,198,204,206,207,208,209,210,217,218,230,231,232,233,234,237,],[-3,-107,-106,-140,-108,-141,137,-139,-142,-3,-107,-106,-4,-126,137,-138,137,137,137,137,137,137,-124,-123,-112,137,-120,137,-137,-132,-116,-115,-125,137,137,137,137,137,-107,-106,-122,137,-114,-121,137,137,]),'RPAREN':([35,40,48,51,54,56,61,78,79,99,116,119,129,155,170,172,175,177,181,186,187,195,196,197,198,204,206,207,208,209,210,230,231,232,233,234,],[-140,-108,-141,-109,-139,-142,-3,-107,-106,-4,-126,196,-113,-138,-110,-111,-124,-123,-112,-120,-117,-137,-132,-116,-115,-125,-129,-131,-128,-127,-130,-122,-119,-114,-121,-118,]),'UNIQUE':([1,9,20,21,22,25,26,28,30,31,32,34,36,39,41,42,43,44,47,49,50,68,89,90,91,92,97,112,113,114,115,117,120,123,124,125,127,131,132,133,139,147,194,199,200,211,217,],[-47,-47,-32,-32,-32,-32,-52,109,-32,-32,-32,-35,-32,-32,-54,-53,-32,-55,-32,-32,-32,-52,-41,-31,-45,-40,-38,-32,-42,-43,-33,-46,-37,-32,-32,-39,109,-36,-44,-34,-32,-47,-51,-50,-48,-49,-52,]),'EQ':([19,23,26,27,35,40,48,51,54,56,61,67,69,78,79,99,101,106,108,110,116,126,129,155,156,157,158,159,161,170,172,175,177,179,181,183,184,185,186,187,189,190,193,195,196,197,198,201,202,204,206,207,208,209,210,217,218,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,259,260,261,262,263,264,265,266,278,279,280,281,282,288,289,],[88,-3,-107,-67,-140,-108,-141,138,-139,-142,-3,-3,-67,-107,-106,-4,-67,-88,-65,-3,-126,-67,138,-138,138,138,138,138,-69,138,138,-124,-123,-86,-112,-60,138,-66,-120,138,-67,-65,-67,-137,-132,-116,-115,-67,-83,-125,138,138,138,138,138,-107,-106,-67,-78,-122,138,-114,-121,138,-61,-62,138,-85,-67,-64,-69,-87,-81,-65,-68,-67,-92,-84,-63,-67,-67,-65,-90,-67,-91,-80,-67,-89,-79,]),'ID':([2,],[53,]),'IF':([0,8,13,57,66,71,72,144,145,146,148,149,152,171,188,205,213,214,219,220,221,225,226,245,246,247,249,250,251,252,254,255,267,269,270,272,274,275,276,284,285,286,287,290,],[16,16,-5,-27,-6,-24,-28,-23,-102,-100,-25,16,-8,-104,-103,-105,-20,-151,16,-5,-14,-9,-26,-151,-149,16,-98,-99,-97,-7,-101,-11,16,-150,16,-146,-15,-12,-10,-22,-148,-147,-13,-21,]),'AND':([23,24,26,27,35,40,48,51,54,56,61,77,78,79,99,101,116,119,129,155,170,172,175,177,181,183,184,186,187,190,195,196,197,198,201,204,206,207,208,209,210,216,217,218,230,231,232,233,234,235,236,237,256,260,266,277,279,],[-3,94,-107,-106,-140,-108,-141,-109,-139,-142,-3,94,-107,-106,-4,178,-126,94,-113,-138,-110,-111,-124,-123,-112,-60,-59,-120,-117,178,-137,-132,-116,-115,178,-125,-129,-131,-128,-127,-130,94,-107,-106,-122,-119,-114,-121,-118,-61,-62,-58,94,178,178,94,178,]),'KWARG':([214,245,246,247,267,269,272,285,286,],[248,248,-149,248,248,-150,-146,-148,-147,]),'HIGHEST':([1,9,93,103,147,178,180,192,],[43,43,169,43,43,43,43,169,]),'FROM':([23,27,35,40,48,54,56,61,67,69,78,79,99,101,108,110,116,126,129,155,161,175,177,181,183,184,186,187,189,190,193,195,196,197,198,201,204,206,207,208,209,210,218,228,229,230,231,232,233,234,235,236,237,239,240,241,244,259,260,263,264,265,266,279,282,],[-3,104,-140,-108,-141,-139,-142,-3,-3,104,-107,-106,-4,104,-65,-3,-126,104,-113,-138,-69,-124,-123,-112,-60,-59,-120,-117,104,-65,104,-137,-132,-116,-115,104,-125,-129,-131,-128,-127,-130,104,104,-78,-122,-119,-114,-121,-118,-61,-62,-58,104,-64,-69,-65,-68,104,-63,104,104,-65,104,104,]),'LIKE':([23,27,61,79,98,99,100,218,],[-3,105,-3,105,173,-4,176,105,]),'MOST':([93,192,],[163,163,]),'MAX':([1,9,103,147,178,180,],[39,39,39,39,39,39,]),'AFTER':([0,8,13,57,66,71,72,144,145,146,148,149,152,171,188,205,213,214,219,220,221,225,226,245,246,247,249,250,251,252,254,255,267,269,270,272,274,275,276,284,285,286,287,290,],[17,17,-5,-27,-6,-24,-28,-23,-102,-100,-25,17,-8,-104,-103,-105,-20,-151,17,-5,-14,-9,-26,-151,-149,17,-98,-99,-97,-7,-101,-11,17,-150,17,-146,-15,-12,-10,-22,-148,-147,-13,-21,]),'WHILE':([0,8,13,57,66,71,72,144,145,146,148,149,152,171,188,205,213,214,219,220,221,225,226,245,246,247,249,250,251,252,254,255,267,269,270,272,274,275,276,284,285,286,287,290,],[1,1,-5,-27,-6,-24,-28,-23,-102,-100,-25,1,-8,-104,-103,-105,-20,-151,1,-5,-14,-9,-26,-151,-149,1,-98,-99,-97,-7,-101,-11,1,-150,1,-146,-15,-12,-10,-22,-148,-147,-13,-21,]),'INDENT':([74,144,213,],[149,214,245,]),'LENGTH':([1,9,103,147,178,180,],[47,47,47,47,47,47,]),'BOOLEAN':([1,3,11,12,15,16,20,21,22,25,30,31,32,34,36,38,39,43,45,47,49,50,85,86,87,88,89,90,91,92,94,96,97,98,100,103,105,113,114,115,117,120,121,122,125,131,132,133,134,135,136,137,138,141,147,173,176,178,180,182,224,248,258,],[48,48,48,48,48,48,-32,-32,-32,-32,-32,-32,-32,-35,-32,48,-32,-32,48,-32,-32,-32,48,48,48,48,-41,-31,-45,-40,48,48,-38,48,48,48,48,-42,-43,-33,-46,-37,48,48,-39,-36,-44,-34,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'SORTBY':([35,40,48,54,56,61,78,79,99,108,110,116,129,155,175,177,181,183,184,186,187,190,195,196,197,198,204,206,207,208,209,210,230,231,232,233,234,235,236,237,244,266,],[-140,-108,-141,-139,-142,-3,-107,-106,-4,191,-3,-126,-113,-138,-124,-123,-112,-60,-59,-120,-117,191,-137,-132,-116,-115,-125,-129,-131,-128,-127,-130,-122,-119,-114,-121,-118,-61,-62,-58,191,191,]),'STRING_CONTINUE':([18,37,61,81,82,83,84,99,118,154,],[83,83,-3,-133,-135,-134,83,-4,83,-136,]),'OF':([20,21,22,25,30,31,32,36,39,43,47,49,50,112,123,124,139,],[90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,]),'ELSEIF':([152,225,252,275,287,],[224,258,-7,-12,-13,]),'HAS':([23,27,61,79,99,218,],[-3,102,-3,102,-4,102,]),'AVG':([1,9,103,147,178,180,],[50,50,50,50,50,50,]),'OR':([23,24,26,27,35,40,48,51,54,56,61,77,78,79,99,101,116,119,129,155,170,172,175,177,181,183,184,186,187,190,195,196,197,198,201,204,206,207,208,209,210,216,217,218,230,231,232,233,234,235,236,237,256,260,266,277,279,],[-3,96,-107,-106,-140,-108,-141,-109,-139,-142,-3,96,-107,-106,-4,180,-126,96,-113,-138,-110,-111,-124,-123,-112,-60,-59,-120,-117,180,-137,-132,-116,-115,180,-125,-129,-131,-128,-127,-130,96,-107,-106,-122,-119,-114,-121,-118,-61,-62,-58,96,180,180,96,180,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'figure':([1,9,147,],[19,19,215,]),'optional_stmts':([247,267,],[268,283,]),'juice':([3,11,12,],[57,71,72,]),'kwarg':([214,245,247,267,],[246,246,269,269,]),'else_if':([152,],[225,]),'expressions':([1,16,38,147,224,258,],[24,77,119,216,256,277,]),'paths':([1,3,4,9,11,12,15,16,18,28,37,38,44,45,84,85,86,87,88,94,96,98,100,102,103,105,111,118,121,122,134,135,136,137,138,141,147,151,166,173,174,176,178,180,182,203,224,248,258,],[27,54,62,69,54,54,54,79,81,108,81,79,126,79,81,79,79,79,79,79,79,54,54,181,79,79,193,81,54,54,79,79,79,79,79,54,218,222,229,79,232,79,79,79,79,244,79,271,79,]),'story':([0,],[6,]),'figaggexp':([93,192,],[161,241,]),'offit':([1,9,44,147,],[28,28,127,28,]),'stmts':([0,149,247,267,],[8,219,270,270,]),'figaggone':([93,192,],[166,166,]),'program':([0,],[10,]),'location':([161,241,],[228,264,]),'kwargs':([214,245,],[247,267,]),'suite':([14,62,70,77,95,107,130,150,153,223,253,256,257,277,],[75,145,148,152,171,188,205,221,226,255,274,275,276,287,]),'sort':([108,190,244,266,],[189,239,265,282,]),'string':([1,3,11,12,15,16,17,33,38,45,85,86,87,88,94,96,98,100,103,104,105,121,122,128,134,135,136,137,138,141,147,173,176,178,180,182,224,248,258,],[35,35,35,35,35,35,80,116,35,35,35,35,35,35,35,35,35,35,35,185,35,35,35,204,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'string_content':([18,37,84,118,],[82,82,154,154,]),'args':([3,11,12,],[55,55,55,]),'stmt':([0,8,149,219,247,267,270,],[13,66,220,66,220,220,66,]),'figexps':([27,69,108,126,218,228,244,264,],[101,101,190,201,101,260,266,279,]),'variable':([1,3,11,12,15,16,38,45,85,86,87,88,94,96,98,100,103,105,121,122,134,135,136,137,138,141,147,173,176,178,180,182,224,248,258,],[40,60,60,60,76,40,40,40,40,40,40,40,40,40,175,177,40,40,197,198,40,40,40,40,40,212,40,40,40,40,40,40,40,273,40,]),'string_inner':([18,37,],[84,118,]),'unique':([28,127,],[111,203,]),'agg':([1,9,103,147,178,180,],[44,44,182,44,182,182,]),'of':([20,21,22,25,30,31,32,36,39,43,47,49,50,112,123,124,139,],[89,91,92,97,113,114,115,117,120,125,131,132,133,194,199,200,211,]),'figure_expression':([1,9,],[46,70,]),'figexp':([103,178,180,],[183,235,236,]),'time':([27,69,101,126,189,193,201,218,228,239,260,264,265,279,282,],[106,106,179,202,238,242,243,106,261,262,278,280,281,288,289,]),'output':([3,11,12,24,27,46,55,80,],[59,59,59,95,107,130,142,153,]),'expression':([1,16,38,45,85,86,87,88,94,96,103,105,134,135,136,137,138,147,173,176,178,180,182,224,258,],[51,51,51,129,156,157,158,159,170,172,184,187,206,207,208,209,210,51,231,234,184,184,237,51,51,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> story','program',1,'p_program','parser.py',42),
  ('program -> WS ID ELIF','program',3,'p_program','parser.py',43),
  ('paths -> PATH','paths',1,'p_paths','parser.py',47),
  ('paths -> paths PATH','paths',2,'p_paths','parser.py',48),
  ('stmts -> stmt','stmts',1,'p_stmts','parser.py',58),
  ('stmts -> stmts stmt','stmts',2,'p_stmts','parser.py',59),
  ('suite -> NEWLINE INDENT stmts DEDENT','suite',4,'p_suite','parser.py',70),
  ('stmt -> IF expressions suite','stmt',3,'p_if','parser.py',77),
  ('stmt -> IF expressions suite else_if','stmt',4,'p_if','parser.py',78),
  ('stmt -> IF expressions suite else_if ELSE suite','stmt',6,'p_if','parser.py',79),
  ('stmt -> IF expressions suite ELSE suite','stmt',5,'p_if','parser.py',80),
  ('else_if -> ELSEIF expressions suite','else_if',3,'p_elseif','parser.py',91),
  ('else_if -> else_if ELSEIF expressions suite','else_if',4,'p_elseif','parser.py',92),
  ('stmt -> TRY suite CATCH suite','stmt',4,'p_try','parser.py',103),
  ('stmt -> TRY suite CATCH suite ELSE suite','stmt',6,'p_try','parser.py',104),
  ('optional_stmts -> stmts','optional_stmts',1,'p_optional_stmts','parser.py',114),
  ('optional_stmts -> <empty>','optional_stmts',0,'p_optional_stmts','parser.py',115),
  ('output -> AS PATH','output',2,'p_output','parser.py',120),
  ('output -> <empty>','output',0,'p_output','parser.py',121),
  ('juice -> args output NEWLINE','juice',3,'p_juice','parser.py',126),
  ('juice -> args output NEWLINE INDENT kwargs optional_stmts DEDENT','juice',7,'p_juice','parser.py',127),
  ('juice -> output NEWLINE INDENT kwargs optional_stmts DEDENT','juice',6,'p_juice','parser.py',128),
  ('juice -> output NEWLINE','juice',2,'p_juice','parser.py',129),
  ('stmt -> SCHEDULE juice','stmt',2,'p_story_scheduled','parser.py',144),
  ('stmt -> WHEN figure_expression suite','stmt',3,'p_story_when','parser.py',148),
  ('stmt -> AFTER string output suite','stmt',4,'p_story_after','parser.py',152),
  ('stmt -> PATH juice','stmt',2,'p_methods','parser.py',156),
  ('stmt -> RANDOM juice','stmt',2,'p_methods','parser.py',157),
  ('story -> stmt EOF','story',2,'p_story','parser.py',163),
  ('story -> stmts EOF','story',2,'p_story','parser.py',164),
  ('of -> OF','of',1,'p_figure_of','parser.py',171),
  ('of -> <empty>','of',0,'p_figure_of','parser.py',172),
  ('agg -> AVERAGE of','agg',2,'p_figure_agg','parser.py',176),
  ('agg -> AVG of','agg',2,'p_figure_agg','parser.py',177),
  ('agg -> NUMBEROF','agg',1,'p_figure_agg','parser.py',178),
  ('agg -> LENGTH of','agg',2,'p_figure_agg','parser.py',179),
  ('agg -> MAX of','agg',2,'p_figure_agg','parser.py',180),
  ('agg -> OLDEST of','agg',2,'p_figure_agg','parser.py',181),
  ('agg -> HIGHEST of','agg',2,'p_figure_agg','parser.py',182),
  ('agg -> LARGEST of','agg',2,'p_figure_agg','parser.py',183),
  ('agg -> MIN of','agg',2,'p_figure_agg','parser.py',184),
  ('agg -> NEWEST of','agg',2,'p_figure_agg','parser.py',185),
  ('agg -> SMALLEST of','agg',2,'p_figure_agg','parser.py',186),
  ('agg -> LOWEST of','agg',2,'p_figure_agg','parser.py',187),
  ('agg -> SUM of','agg',2,'p_figure_agg','parser.py',188),
  ('agg -> RANDOM of','agg',2,'p_figure_agg','parser.py',189),
  ('agg -> <empty>','agg',0,'p_figure_agg','parser.py',190),
  ('offit -> FIRST DIGITS of','offit',3,'p_figure_offit','parser.py',195),
  ('offit -> TOP DIGITS of','offit',3,'p_figure_offit','parser.py',196),
  ('offit -> LAST DIGITS of','offit',3,'p_figure_offit','parser.py',197),
  ('offit -> BOTTOM DIGITS of','offit',3,'p_figure_offit','parser.py',198),
  ('offit -> DIGITS','offit',1,'p_figure_offit','parser.py',199),
  ('offit -> FIRST','offit',1,'p_figure_offit','parser.py',200),
  ('offit -> LAST','offit',1,'p_figure_offit','parser.py',201),
  ('offit -> <empty>','offit',0,'p_figure_offit','parser.py',202),
  ('unique -> UNIQUE','unique',1,'p_figure_unique','parser.py',219),
  ('unique -> <empty>','unique',0,'p_figure_unique','parser.py',220),
  ('figexp -> agg expression','figexp',2,'p_figexp','parser.py',225),
  ('figexp -> expression','figexp',1,'p_figexp','parser.py',226),
  ('figexps -> WHERE figexp','figexps',2,'p_figure_expressions','parser.py',234),
  ('figexps -> figexps AND figexp','figexps',3,'p_figure_expressions','parser.py',235),
  ('figexps -> figexps OR figexp','figexps',3,'p_figure_expressions','parser.py',236),
  ('sort -> SORTBY PATH ASCDESC','sort',3,'p_figure_sort','parser.py',243),
  ('sort -> SORTBY PATH','sort',2,'p_figure_sort','parser.py',244),
  ('sort -> <empty>','sort',0,'p_figure_sort','parser.py',245),
  ('time -> FROM string','time',2,'p_figure_time','parser.py',252),
  ('time -> <empty>','time',0,'p_figure_time','parser.py',253),
  ('location -> NI PATH','location',2,'p_figure_location','parser.py',258),
  ('location -> <empty>','location',0,'p_figure_location','parser.py',259),
  ('figaggone -> MOST','figaggone',1,'p_figaggone','parser.py',264),
  ('figaggone -> HIGHEST','figaggone',1,'p_figaggone','parser.py',265),
  ('figaggone -> LARGEST','figaggone',1,'p_figaggone','parser.py',266),
  ('figaggone -> NEWEST','figaggone',1,'p_figaggone','parser.py',267),
  ('figaggone -> LEAST','figaggone',1,'p_figaggone','parser.py',268),
  ('figaggone -> SMALLEST','figaggone',1,'p_figaggone','parser.py',269),
  ('figaggone -> LOWEST','figaggone',1,'p_figaggone','parser.py',270),
  ('figaggone -> OLDEST','figaggone',1,'p_figaggone','parser.py',271),
  ('figaggexp -> figaggone paths','figaggexp',2,'p_figure_aggexp','parser.py',275),
  ('figure -> agg offit unique paths figexps sort time','figure',7,'p_figure','parser.py',280),
  ('figure -> agg offit unique paths sort time','figure',6,'p_figure','parser.py',281),
  ('figure -> agg paths figexps time','figure',4,'p_figure','parser.py',282),
  ('figure -> agg paths figexps','figure',3,'p_figure','parser.py',283),
  ('figure -> agg paths time','figure',3,'p_figure','parser.py',284),
  ('figure -> offit paths figexps sort time','figure',5,'p_figure','parser.py',285),
  ('figure -> offit paths sort time','figure',4,'p_figure','parser.py',286),
  ('figure -> paths figexps time','figure',3,'p_figure','parser.py',287),
  ('figure -> offit unique paths time','figure',4,'p_figure','parser.py',288),
  ('figure -> paths time','figure',2,'p_figure','parser.py',289),
  ('figure -> offit PATH WITH figaggexp location figexps time','figure',7,'p_figure_with','parser.py',303),
  ('figure -> PATH WITH figaggexp location figexps time','figure',6,'p_figure_with','parser.py',304),
  ('figure -> offit PATH WITH figaggexp location time','figure',6,'p_figure_with','parser.py',305),
  ('figure -> PATH WITH figaggexp location time','figure',5,'p_figure_with','parser.py',306),
  ('figure_expression -> figure LT expression','figure_expression',3,'p_figure_expression','parser.py',317),
  ('figure_expression -> figure GT expression','figure_expression',3,'p_figure_expression','parser.py',318),
  ('figure_expression -> figure EQ expression','figure_expression',3,'p_figure_expression','parser.py',319),
  ('figure_expression -> figure NE expression','figure_expression',3,'p_figure_expression','parser.py',320),
  ('stmt -> SET PATH TO paths NEWLINE','stmt',5,'p_stmt_set_path_to_paths','parser.py',328),
  ('stmt -> SET PATH TO figure NEWLINE','stmt',5,'p_stmt_set_path_to_figure','parser.py',332),
  ('stmt -> SET PATH TO expressions NEWLINE','stmt',5,'p_stmt_set_path_to_expression','parser.py',336),
  ('stmt -> UNSET PATH NEWLINE','stmt',3,'p_stmt_unset_path','parser.py',340),
  ('stmt -> PUSH variable INTO paths NEWLINE','stmt',5,'p_stmt_push','parser.py',344),
  ('stmt -> WITH paths suite','stmt',3,'p_stmt_with','parser.py',348),
  ('stmt -> WHILE paths output suite','stmt',4,'p_stmt_while','parser.py',355),
  ('stmt -> WHILE expressions output suite','stmt',4,'p_stmt_while','parser.py',356),
  ('stmt -> WHILE figure_expression output suite','stmt',4,'p_stmt_while','parser.py',357),
  ('expression -> paths','expression',1,'p_expression_path','parser.py',364),
  ('expression -> DIGITS','expression',1,'p_expression_num','parser.py',368),
  ('expression -> variable','expression',1,'p_expression_var','parser.py',372),
  ('expressions -> expression','expressions',1,'p_expressions','parser.py',376),
  ('expressions -> expressions AND expression','expressions',3,'p_expressions','parser.py',377),
  ('expressions -> expressions OR expression','expressions',3,'p_expressions','parser.py',378),
  ('expression -> paths HAS paths','expression',3,'p_expression_has','parser.py',388),
  ('expression -> ISNT expression','expression',2,'p_expression_is_isnt','parser.py',392),
  ('expression -> paths ISNT NI paths','expression',4,'p_expression_not_in','parser.py',396),
  ('expression -> variable CONTAINS variable','expression',3,'p_expression_contains','parser.py',400),
  ('expression -> variable NI variable','expression',3,'p_expression_contains','parser.py',401),
  ('expression -> paths LIKE expression','expression',3,'p_expression_like','parser.py',408),
  ('expression -> paths IS LIKE expression','expression',4,'p_expression_like','parser.py',409),
  ('expression -> paths ISNT LIKE expression','expression',4,'p_expression_like','parser.py',410),
  ('expression -> paths LIKE REGEX','expression',3,'p_expression_like','parser.py',411),
  ('expression -> paths IS LIKE REGEX','expression',4,'p_expression_like','parser.py',412),
  ('expression -> paths ISNT LIKE REGEX','expression',4,'p_expression_like','parser.py',413),
  ('expression -> paths IS variable','expression',3,'p_expression_is','parser.py',423),
  ('expression -> paths ISNT variable','expression',3,'p_expression_is','parser.py',424),
  ('expression -> ISNT TAGGED string','expression',3,'p_expression_tagged','parser.py',428),
  ('expression -> TAGGED string','expression',2,'p_expression_tagged','parser.py',429),
  ('expression -> expression OPERATOR expression','expression',3,'p_expression_math','parser.py',439),
  ('expression -> expression LT expression','expression',3,'p_expression_math','parser.py',440),
  ('expression -> expression GT expression','expression',3,'p_expression_math','parser.py',441),
  ('expression -> expression EQ expression','expression',3,'p_expression_math','parser.py',442),
  ('expression -> expression NE expression','expression',3,'p_expression_math','parser.py',443),
  ('expression -> LPAREN expressions RPAREN','expression',3,'p_expression_group','parser.py',447),
  ('string_content -> paths','string_content',1,'p_string_content','parser.py',456),
  ('string_content -> STRING_CONTINUE','string_content',1,'p_string_content','parser.py',457),
  ('string_inner -> string_content','string_inner',1,'p_string_inner','parser.py',461),
  ('string_inner -> string_inner string_content','string_inner',2,'p_string_inner','parser.py',462),
  ('string -> STRING_START_SINGLE string_inner STRING_END','string',3,'p_string','parser.py',469),
  ('string -> STRING_START_TRIPLE string_inner STRING_END','string',3,'p_string','parser.py',470),
  ('variable -> paths','variable',1,'p_variable','parser.py',477),
  ('variable -> string','variable',1,'p_variable','parser.py',478),
  ('variable -> BOOLEAN','variable',1,'p_variable','parser.py',479),
  ('variable -> DIGITS','variable',1,'p_variable','parser.py',480),
  ('args -> variable','args',1,'p_args','parser.py',487),
  ('args -> args COMMA variable','args',3,'p_args','parser.py',488),
  ('args -> <empty>','args',0,'p_args','parser.py',489),
  ('kwarg -> KWARG NEWLINE','kwarg',2,'p_kwarg','parser.py',497),
  ('kwarg -> KWARG variable NEWLINE','kwarg',3,'p_kwarg','parser.py',498),
  ('kwarg -> KWARG paths NEWLINE','kwarg',3,'p_kwarg','parser.py',499),
  ('kwargs -> kwarg','kwargs',1,'p_kwargs','parser.py',506),
  ('kwargs -> kwargs kwarg','kwargs',2,'p_kwargs','parser.py',507),
  ('kwargs -> <empty>','kwargs',0,'p_kwargs','parser.py',508),
]
